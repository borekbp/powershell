#DANE WEJSCIOWE
$podanyIP = "10.128.4.61"
$podanyHOSTNAME = "PTw44k01112"
$podanyMAC = "78-11-c0-b2-49-24"
$tickedID = Get-Random -Minimum 70000 -Maximum 79999

#PARAMETRY POMOCNICZE
$3octetIP = $podanyIP.Split('.')[0]+'.'+$podanyIP.Split('.')[1]+'.'+$podanyIP.Split('.')[2]+'.'
$podanyIP_ok = 'False'
$komunikatSDMzwrotny = ''
$opis = 'PAM_' + $tickedID

#BAZY DHCP SCOPE ID DOPUSZCZONE DO PROJEKTU
$netwhitelist = ("10.3.209.0", "10.5.26.0", "10.5.100.0", "10.10.100.0", "10.13.192.0", "10.128.4.0")
$3octet1plus = ("10.5.101.", "10.5.27.", "10.13.193.")
$3octet2plus = ("10.13.194.")
$3octet3plus = ("10.13.195.")

#ZMIENNE SPRAWDZAJACE
$netwhitelist_check = $false  #czy jest w scope dopuszczonym do projektu
$iprightrange_check = $false  #czy ip miesci sie dhcp range
$witchdhcpserver_check = $false #czy dhcp man czy dhcp wan
$podanyMACinScope_check = $true #czy podany mac ma juz rezerwacje w scope
$podanyipinScope_check= $true   #czy podany IP ma rezerwację na DHCP
$MACandIPmatchLease_check = $false   #czy podana kobinacja MAC i IP istnieją już na DHCP w leasach
$podanyMACinLease_check = $false #czy podany mac ma juz 
$MAIN_CHECK_PRE = $false #czy dane wejsciowe umozliwiaja obsluge
$podanyIPinLease_check = $true
$MacAddress_check = $false #sprawdza czy adres MAC jest prawidłowy (długość i czy szesnastkowy) oraz formatuje

function ZamknijWniosek
{
param ([string]$komunikat)
write $komunikat
}

function DodajRezerwacje
{
param ([string]$IPtoConfigure)

Add-DhcpServerv4Reservation -ScopeId $scopeID -ComputerName $serwerDHCP -ClientId $podanyMAC -IPAddress $IPtoConfigure -Description $opis -Name $podanyHOSTNAME -ErrorAction SilentlyContinue

}


# MAC Address sprawdzenie i formatowanie
$MacAddress1 = $podanyMAC -replace '(:| |-|\.)'

if ($MacAddress1.Length -eq 12){
    $j = 0
    For ($i=0; $i -le 11; $i++) {
        if ($MacAddress1[$i] -match "^[0-9A-Fa-f]") {
            $j++
        }
    }
    if ($j -eq 12){
        $MacAddress_check = $true
        $MacAddress = $MacAddress1
    }
}else {
    $MacAddress_check = $false
}

if ($MacAddress_check) {
    $MacAddress = $MacAddress.insert(2,"-") 
    $MacAddress = $MacAddress.insert(5,"-") 
    $MacAddress = $MacAddress.insert(8,"-") 
    $MacAddress = $MacAddress.insert(11,"-") 
    $MacAddress = $MacAddress.insert(14,"-") 
    $MacAddress = $MacAddress.ToLower()
    $podanyMAC = $MacAddress
}
  


#ustal DHCP_SCOPE_ID
if ($3octet1plus -contains $3octetIP){
    #siec 23bit
    $3octetIP = $podanyIP.Split('.')[0]+'.'+$podanyIP.Split('.')[1]+'.'+[int]($podanyIP.Split('.')[2]-1)+'.'
} elseif ($3octet2plus -contains $3octetIP) {
    #siec 22bit
    $3octetIP = $podanyIP.Split('.')[0]+'.'+$podanyIP.Split('.')[1]+'.'+[int]($podanyIP.Split('.')[2]-2)+'.'
} elseif ($3octet3plus -contains $3octetIP) {
    #siec 22bit
    $3octetIP = $podanyIP.Split('.')[0]+'.'+$podanyIP.Split('.')[1]+'.'+[int]($podanyIP.Split('.')[2]-3)+'.'
} else {
    #sieci 24-bit
}
$scopeID = $3octetIP + '0'


#USTAL CZY SCOPE JEST NA WHITE-LIST
if ($netwhitelist -contains $scopeID){
    $netwhitelist_check = $true
} else {
    $netwhitelist_check = $false
}


#USTAL KTORY SERWER DHCP
if  ($podanyIP.Split('.')[1] -match "^3{1}$|^4{1}$|^5{1}$|^13{1}$|^14{1}$"){ 
     $serwerDHCP = 'osw00457.pzu.pl'
     $witchdhcpserver_check = $true
} elseif ($podanyIP.Split('.')[1] -In 204..208){
    $serwerDHCP = 'osw00459.pzu.pl'
    $witchdhcpserver_check = $true
} elseif ($podanyIP.Split('.')[1] -eq 128){
    $serwerDHCP = 'osw01213.pzu.pl'
    $witchdhcpserver_check = $true
} else{
    $witchdhcpserver_check = $false
}

#SPRAWDZ CZY 4-OKTET JEST W ZAKRESIE PRZYDZIELANYCH IP
if ([int]$podanyIP.Split('.')[3] -In 10..250) {
    $iprightrange_check =  $true
} else {
    $iprightrange_check = $false
}


#MAIN PRE CHECK
#CZY PODANE DANE NADAJA SIE DO OBSLUGI

if ($netwhitelist_check -and $witchdhcpserver_check -and $iprightrange_check -and $MacAddress_check) {
    $MAIN_CHECK_PRE = $true
} else {
    $MAIN_CHECK_PRE = $false
}



#SPRAWDZ CZY JEST JUZ STATYCZNA REZERWACJA 
#W TEJ PULI DHCP DLA TEGO ADRESU MAC
try 
{
    $komenda1 = Get-DhcpServerv4Reservation -ComputerName $serwerDHCP -ScopeId $scopeID -ClientId $podanyMAC -EA Stop
}
catch [Microsoft.Management.Infrastructure.CimException]
{
    #PODANY ADRES MAC NIE MA JESZCZE REZERWACJI W TYM SCOPE
    $podanyMACinScope_check= $false
}


#SPRAWDZ CZY JEST JUZ STATYCZNA REZERWACJA 
#W TEJ PULI DHCP DLA TEGO ADRESU IP
try 
{
    $komenda2 = Get-DhcpServerv4Reservation -ComputerName $serwerDHCP -IPAddress $podanyIP -EA Stop
}
catch [Microsoft.Management.Infrastructure.CimException]
{
    $podanyipinScope_check = $false #podany IP jest wolny
}


#SPRAWDZ CZY JEST AKTYWNY LEASE
#W TEJ PULI DHCP DLA TEGO ADRESU IP


try 
{
    $komenda4 = Get-DhcpServerv4Lease -ComputerName $serwerDHCP -ScopeId $scopeID -ClientId $podanyMAC -EA Stop
}
catch [Microsoft.Management.Infrastructure.CimException]
{
    $podanyMACinLease_check = $false #podany IP jest wolny
}

#SPRAWDZ CZY KOMBINACJA PODANY IP I MAC ISTNIEJE
if ($komenda4.ClientId -eq $podanyMAC) {
    $MACandIPmatchLease_check = $true
}




if ($MAIN_CHECK_PRE -eq $true) {
    $komenda3 = Get-DhcpServerv4FreeIPAddress -ComputerName $serwerDHCP -ScopeId $scopeID -StartAddress $podanyIP -EndAddress $podanyIP -WarningAction SilentlyContinue -ErrorAction st
    if ([string]::IsNullOrEmpty($komenda3)) {
        $podanyIPinLease_check = $false #nie znaleziono ten IP jako wolny do wziecia
    } else {
        $podanyIPinLease_check = $true #znaleziono ten IP jako wolny do wziecia
}
}




#SPRAWDZ CZY JEST AKTYWNY LEASE
#W TEJ PULI DHCP DLA TEGO ADRESU MAC
try 
{
    $komenda4 = Get-DhcpServerv4Lease -ComputerName $serwerDHCP -ScopeId $scopeID -ClientId $podanyMAC -EA Stop
}
catch [Microsoft.Management.Infrastructure.CimException]
{
    $podanyMACinLease_check = $false #podany IP jest wolny
}

#SPRAWDZ CZY KOMBINACJA PODANY IP I MAC ISTNIEJE
if ($komenda4.ClientId -eq $podanyMAC) {
    $MACandIPmatchLease_check = $true
}



##################
##################
#OBSZAR DECYZJI
##################
##################



#A
if ($MAIN_CHECK_PRE -eq $false) {
    ZamknijWniosek -komunikat "Nie udało się wykonać rezerwacji adresu IP.Sprawdz podane dane lub zgłoś się do WANoperator"
}

#B
if ($MAIN_CHECK_PRE -and $podanyMACinScope_check) {
    $ustaloneIP = $komenda1.IPAddress.IPAddressToString
    ZamknijWniosek -komunikat "Podany adres MAC: $podanyMAC ma już rezerwację: $ustaloneIP"
}

#C
if ($MAIN_CHECK_PRE -and ($podanyMACinScope_check -eq $false) -and ($podanyipinScope_check)) {
    $ustaloneIP = Get-DhcpServerv4FreeIPAddress -ComputerName $serwerDHCP -ScopeId $scopeID
    #DODANIE REZERWACJI (PIERWSZE WOLNE IP)
    DodajRezerwacje -IPtoConfigure $ustaloneIP
    ZamknijWniosek -komunikat "Nie można ustawić rezerwacji dla wskazanego IP. Przydzielony adres IP: $ustaloneIP"
}

#D
if ($MAIN_CHECK_PRE -and ($podanyMACinScope_check -eq $false) -and ($podanyipinScope_check -eq $false) -and ($podanyIPinLease_check = $true)) {
    #DODANIE REZERWACJI (JAKA CHCE USER)
    DodajRezerwacje -IPtoConfigure $podanyIP
    ZamknijWniosek -komunikat "Rezerwacja adresu IP: $podanyIP oraz adresu MAC: $podanyMAC skonfigurowana."
}

#E1
if ($MAIN_CHECK_PRE -and ($podanyMACinScope_check -eq $false) -and ($podanyipinScope_check -eq $false) -and ($podanyIPinLease_check = $false) -and ($MACandIPmatchLease_check = $true)) {
    #DODANIE REZERWACJI (JAKA CHCE USER)
    DodajRezerwacje -IPtoConfigure $podanyIP
    ZamknijWniosek -komunikat "Rezerwacja adresu IP: $podanyIP oraz adresu MAC: $podanyMAC skonfigurowana."
    }

#E2
if ($MAIN_CHECK_PRE -and ($podanyMACinScope_check -eq $false) -and ($podanyipinScope_check -eq $false) -and ($podanyIPinLease_check = $false) -and ($MACandIPmatchLease_check = $false)) {
    #DODANIE REZERWACJI (PIERWSZE WOLNE IP)
    DodajRezerwacje -IPtoConfigure $ustaloneIP
    ZamknijWniosek -komunikat "Nie można ustawić rezerwacji dla wskazanego IP. Przydzielony adres IP: $ustaloneIP"
    }


# write netwhitelist_check
# write $netwhitelist_check 
# write witchdhcpserver_check
# write $witchdhcpserver_check
# write iprightrange_check 
# write $iprightrange_check
# write -----------------------------------
# write MAIN_CHECK_PRE
# write $MAIN_CHECK_PRE
# write podanyMACinScope_check
# write $podanyMACinScope_check
# write podanyipinScope_check
# write $podanyipinScope_check
# write podanyIPinLease_check
# write $podanyIPinLease_check
# write MACandIPmatchLease_check
# write $MACandIPmatchLease_check
